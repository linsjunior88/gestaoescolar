import os
from typing import Any, Dict, List, Optional, Union

from pydantic_settings import BaseSettings
from pydantic import AnyHttpUrl, PostgresDsn, field_validator


class Settings(BaseSettings):
    PROJECT_NAME: str = "Sistema de Gestão Escolar"
    
    # API settings
    API_V1_STR: str = "/api"
    
    # CORS settings
    CORS_ORIGINS_LIST: List[AnyHttpUrl] = []

    @field_validator("CORS_ORIGINS_LIST", mode="before")
    def assemble_cors_origins(cls, v: Union[str, List[str]]) -> List[str]:
        if isinstance(v, str) and not v.startswith("["):
            return [i.strip() for i in v.split(",")]
        elif isinstance(v, (list, str)):
            return v
        raise ValueError(v)

    # Database settings - String de conexão simplificada
    DATABASE_URL: str = "postgresql://postgres:4chrOn0s@localhost:5432/gestao_escolar"
    
    # JWT settings
    SECRET_KEY: str = "4chrOn0s"
    ALGORITHM: str = "HS256"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 60 * 24 * 8  # 8 days
    
    # Admin user settings
    ADMIN_USERNAME: str = "admin"
    ADMIN_PASSWORD: str = "4chrOn0s"
    ADMIN_EMAIL: str = "admin@example.com"
    ADMIN_FULL_NAME: str = "Administrador do Sistema"
    
    # Paths
    BASE_DIR: str = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    
    # Logging
    LOG_LEVEL: str = "INFO"
    
    class Config:
        case_sensitive = True


settings = Settings()

# Para testes, podemos sobrescrever configurações
def get_settings_override():
    return Settings(DATABASE_URL="postgresql://postgres:4chrOn0s@localhost:5432/gestao_escolar_test") 